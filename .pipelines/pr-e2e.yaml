trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*

resources:
  containers:
  - container: dev1
    image: quay.io/deis/go-dev:v1.19.1

jobs:
- job: unit_tests
  timeoutInMinutes: 60
  cancelTimeoutInMinutes: 5
  strategy:
    maxParallel: 0
  pool:
      vmImage: 'Ubuntu 16.04'

  container: dev1

  variables:
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/usr/local/go' # Go installation path
    GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
    modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

  steps:
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      mv !(gopath) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: 'Set up the Go workspace'
  - script: make bootstrap
    displayName: Install dependencies
    workingDirectory: $(modulePath)
  - script: make validate-copyright-headers test-style
    displayName: Run linting rules
    workingDirectory: $(modulePath)
  - script: make validate-dependencies
    displayName: Check if imports, Gopkg.toml, and Gopkg.lock are in sync
    workingDirectory: $(modulePath)
  - script: make build-cross
    displayName: Build cross-architectural binaries
    workingDirectory: $(modulePath)
  - script: |
        export CODECOV_TOKEN=$(CODECOV_TOKEN)
        make coverage
    displayName: Run unit tests and calculate coverage
    workingDirectory: $(modulePath)

- template: e2e-job-template.yaml
  parameters:
    name: 'default_linux_e2e'
    apimodel: 'examples/kubernetes.json'

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_10_release_e2e'
    k8sRelease: '1.10'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_11_release_e2e'
    k8sRelease: '1.11'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_12_release_e2e'
    k8sRelease: '1.12'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_13_release_e2e'
    k8sRelease: '1.13'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_14_release_e2e'
    k8sRelease: '1.14'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_windows_1_10_release_e2e'
    k8sRelease: '1.10'
    apimodel: 'examples/e2e-tests/kubernetes/windows/hybrid/definition.json'

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_windows_1_11_release_e2e'
    k8sRelease: '1.11'
    apimodel: 'examples/e2e-tests/kubernetes/windows/hybrid/definition.json'

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_windows_1_12_release_e2e'
    k8sRelease: '1.12'
    apimodel: 'examples/e2e-tests/kubernetes/windows/hybrid/definition.json'

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_windows_1_13_release_e2e'
    k8sRelease: '1.13'
    apimodel: 'examples/e2e-tests/kubernetes/windows/hybrid/definition.json'

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_windows_1_14_release_e2e'
    k8sRelease: '1.14'
    apimodel: 'examples/e2e-tests/kubernetes/windows/hybrid/definition.json'
