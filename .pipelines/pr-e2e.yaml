trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*

resources:
  containers:
  - container: dev1
    image: quay.io/deis/go-dev:v1.25.0

jobs:
- job: unit_tests
  timeoutInMinutes: 60
  cancelTimeoutInMinutes: 5
  strategy:
    maxParallel: 0
  pool:
      vmImage: 'Ubuntu 16.04'

  container: dev1

  variables:
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/usr/local/go' # Go installation path
    GOPATH: '$(Agent.TempDirectory)/go' # Go workspace path

  steps:
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      shopt -s extglob
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: 'Set up the Go workspace'
  - script: make bootstrap
    displayName: Install dependencies
  - script: make validate-dependencies
    displayName: Check if imports, Gopkg.toml, and Gopkg.lock are in sync
  - script: make ensure-generated
    displayName: Check if generated code is up to date
  - script: make generate test-style
    displayName: Run linting rules
  - script: make build-cross
    displayName: Build cross-architectural binaries
  - script: |
        export CODECOV_TOKEN=$(CODECOV_TOKEN)
        make coverage
    displayName: Run unit tests and calculate coverage

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_non_vhd_deployment'
    apimodel: 'examples/kubernetes-non-vhd-distros.json'
    enableKMSEncryption: false

- template: e2e-job-template.yaml
  parameters:
    name: 'ubuntu_18_04_linux_e2e'
    apimodel: 'examples/ubuntu-1804/kubernetes.json'
    skipTests: 'should have healthy time synchronization'
    stabilityIterations: '10'
    enableKMSEncryption: false

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_13_release_e2e'
    k8sRelease: '1.13'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true
    enableKMSEncryption: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_14_release_e2e'
    k8sRelease: '1.14'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true
    enableKMSEncryption: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_15_release_e2e'
    k8sRelease: '1.15'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true
    enableKMSEncryption: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_16_release_e2e'
    k8sRelease: '1.16'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true
    enableKMSEncryption: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_17_release_e2e'
    k8sRelease: '1.17'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true
    enableKMSEncryption: true

- template: e2e-job-template.yaml
  parameters:
    name: 'k8s_1_18_release_e2e'
    k8sRelease: '1.18'
    apimodel: 'examples/e2e-tests/kubernetes/release/default/definition.json'
    createVNET: true
    enableKMSEncryption: false
