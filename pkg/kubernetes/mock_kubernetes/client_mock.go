// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces.go

// Package mock_kubernetes is a generated GoMock package.
package mock_kubernetes

import (
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
	v11 "k8s.io/api/rbac/v1"
	v12 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ListPods mocks base method
func (m *MockClient) ListPods(node *v10.Node) (*v10.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPods", node)
	ret0, _ := ret[0].(*v10.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPods indicates an expected call of ListPods
func (mr *MockClientMockRecorder) ListPods(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPods", reflect.TypeOf((*MockClient)(nil).ListPods), node)
}

// ListAllPods mocks base method
func (m *MockClient) ListAllPods() (*v10.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllPods")
	ret0, _ := ret[0].(*v10.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllPods indicates an expected call of ListAllPods
func (mr *MockClientMockRecorder) ListAllPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllPods", reflect.TypeOf((*MockClient)(nil).ListAllPods))
}

// ListNodes mocks base method
func (m *MockClient) ListNodes() (*v10.NodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes")
	ret0, _ := ret[0].(*v10.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes
func (mr *MockClientMockRecorder) ListNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockClient)(nil).ListNodes))
}

// ListNodesByOptions mocks base method
func (m *MockClient) ListNodesByOptions(opts v12.ListOptions) (*v10.NodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesByOptions", opts)
	ret0, _ := ret[0].(*v10.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodesByOptions indicates an expected call of ListNodesByOptions
func (mr *MockClientMockRecorder) ListNodesByOptions(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesByOptions", reflect.TypeOf((*MockClient)(nil).ListNodesByOptions), opts)
}

// ListServiceAccounts mocks base method
func (m *MockClient) ListServiceAccounts(namespace string) (*v10.ServiceAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceAccounts", namespace)
	ret0, _ := ret[0].(*v10.ServiceAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceAccounts indicates an expected call of ListServiceAccounts
func (mr *MockClientMockRecorder) ListServiceAccounts(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAccounts", reflect.TypeOf((*MockClient)(nil).ListServiceAccounts), namespace)
}

// GetDaemonSet mocks base method
func (m *MockClient) GetDaemonSet(namespace, name string) (*v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSet", namespace, name)
	ret0, _ := ret[0].(*v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSet indicates an expected call of GetDaemonSet
func (mr *MockClientMockRecorder) GetDaemonSet(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSet", reflect.TypeOf((*MockClient)(nil).GetDaemonSet), namespace, name)
}

// GetDeployment mocks base method
func (m *MockClient) GetDeployment(namespace, name string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", namespace, name)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockClientMockRecorder) GetDeployment(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockClient)(nil).GetDeployment), namespace, name)
}

// GetNode mocks base method
func (m *MockClient) GetNode(name string) (*v10.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", name)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockClientMockRecorder) GetNode(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockClient)(nil).GetNode), name)
}

// UpdateNode mocks base method
func (m *MockClient) UpdateNode(node *v10.Node) (*v10.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", node)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode
func (mr *MockClientMockRecorder) UpdateNode(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockClient)(nil).UpdateNode), node)
}

// DeleteNode mocks base method
func (m *MockClient) DeleteNode(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNode indicates an expected call of DeleteNode
func (mr *MockClientMockRecorder) DeleteNode(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockClient)(nil).DeleteNode), name)
}

// SupportEviction mocks base method
func (m *MockClient) SupportEviction() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportEviction")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportEviction indicates an expected call of SupportEviction
func (mr *MockClientMockRecorder) SupportEviction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportEviction", reflect.TypeOf((*MockClient)(nil).SupportEviction))
}

// DeleteClusterRole mocks base method
func (m *MockClient) DeleteClusterRole(role *v11.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRole", role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole
func (mr *MockClientMockRecorder) DeleteClusterRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockClient)(nil).DeleteClusterRole), role)
}

// DeleteDaemonSet mocks base method
func (m *MockClient) DeleteDaemonSet(ds *v1.DaemonSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSet", ds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSet indicates an expected call of DeleteDaemonSet
func (mr *MockClientMockRecorder) DeleteDaemonSet(ds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSet", reflect.TypeOf((*MockClient)(nil).DeleteDaemonSet), ds)
}

// DeleteDeployment mocks base method
func (m *MockClient) DeleteDeployment(ds *v1.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", ds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockClientMockRecorder) DeleteDeployment(ds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockClient)(nil).DeleteDeployment), ds)
}

// DeletePod mocks base method
func (m *MockClient) DeletePod(pod *v10.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", pod)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod
func (mr *MockClientMockRecorder) DeletePod(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockClient)(nil).DeletePod), pod)
}

// DeleteServiceAccount mocks base method
func (m *MockClient) DeleteServiceAccount(sa *v10.ServiceAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", sa)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount
func (mr *MockClientMockRecorder) DeleteServiceAccount(sa interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockClient)(nil).DeleteServiceAccount), sa)
}

// EvictPod mocks base method
func (m *MockClient) EvictPod(pod *v10.Pod, policyGroupVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictPod", pod, policyGroupVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvictPod indicates an expected call of EvictPod
func (mr *MockClientMockRecorder) EvictPod(pod, policyGroupVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictPod", reflect.TypeOf((*MockClient)(nil).EvictPod), pod, policyGroupVersion)
}

// WaitForDelete mocks base method
func (m *MockClient) WaitForDelete(logger *logrus.Entry, pods []v10.Pod, usingEviction bool) ([]v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDelete", logger, pods, usingEviction)
	ret0, _ := ret[0].([]v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForDelete indicates an expected call of WaitForDelete
func (mr *MockClientMockRecorder) WaitForDelete(logger, pods, usingEviction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDelete", reflect.TypeOf((*MockClient)(nil).WaitForDelete), logger, pods, usingEviction)
}

// UpdateDeployment mocks base method
func (m *MockClient) UpdateDeployment(namespace string, deployment *v1.Deployment) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", namespace, deployment)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployment indicates an expected call of UpdateDeployment
func (mr *MockClientMockRecorder) UpdateDeployment(namespace, deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockClient)(nil).UpdateDeployment), namespace, deployment)
}

// MockNodeLister is a mock of NodeLister interface
type MockNodeLister struct {
	ctrl     *gomock.Controller
	recorder *MockNodeListerMockRecorder
}

// MockNodeListerMockRecorder is the mock recorder for MockNodeLister
type MockNodeListerMockRecorder struct {
	mock *MockNodeLister
}

// NewMockNodeLister creates a new mock instance
func NewMockNodeLister(ctrl *gomock.Controller) *MockNodeLister {
	mock := &MockNodeLister{ctrl: ctrl}
	mock.recorder = &MockNodeListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeLister) EXPECT() *MockNodeListerMockRecorder {
	return m.recorder
}

// ListNodes mocks base method
func (m *MockNodeLister) ListNodes() (*v10.NodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes")
	ret0, _ := ret[0].(*v10.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes
func (mr *MockNodeListerMockRecorder) ListNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockNodeLister)(nil).ListNodes))
}
